


from enum import Enum
import discord


class RunningEnvironment():
	TESTING = 'test'
	DEPLOY = 'deploy'


class TimeConfig:
	HUMAN_READABLE_HOUR_MIN_SECOND = '%H:%M:%S'
	HUMAN_READABLE_HOUR_MIN = '%H:%M'
	HUMAN_READABLE_DATE = '%Y-%m-%d'

class Author:
    NAME = 'H·∫°t B√≠'
    DISCORD_ID = '546919469470056448'
    USER_URL = f'https://discord.com/users/{DISCORD_ID}'
    _avatar_url = None  # Cache avatar URL

    WATERMARK = f'Develeoped by {NAME}'

    

    @classmethod
    async def initialize(cls, client: discord.Client):
        """Initialize author info once when bot starts"""
        if not cls._avatar_url:
            try:
                user = await client.fetch_user(int(cls.DISCORD_ID))
                cls._avatar_url = user.display_avatar.url
            except Exception as e:
                print(f"Error fetching author avatar: {e}")
                cls._avatar_url = None

    @classmethod
    async def get_avatar_url(cls) -> str:
        """Get cached avatar URL"""
        return cls._avatar_url

class Embed(Enum):
    MAX_LENGTH = 60


    def __str__(self):
        return self.value
    
class ProcessBar(Enum):
    """Enum for process bar
    
    Filled Characters:
        ‚ñà (Full block)
        ‚ñ∞ (Black square with white)
        ‚ñ† (Black square)
        ‚îÅ (Heavy horizontal)
        ‚ïê (Double horizontal)
        ‚ñ¨ (Black horizontal rectangle)
        ‚óè (Black circle)
        ‚ñÆ (Black vertical rectangle)
        ‚óæ (Black small square)
    Empty Characters:
        ‚ñë (Light shade)
        ‚ñ± (White square with black)
        ‚ñ° (White square)
        ‚îÄ (Light horizontal)
        ‚ñ≠ (White rectangle)
        ‚óã (White circle)
        ‚ñØ (White vertical rectangle)
        ‚óΩ (White small square)
    Cursor:
        üîò (Radio button)
        ‚ö™ (Medium white circle)
        ‚óè (Black circle)
        ‚óâ (Fisheye)
        ‚óÜ (Black diamond)
        ‚óà (White diamond containing black)
        ‚ñ∂ (Black right-pointing triangle)
        ‚≠ê (Star)
    """

    FULL_BLOCK = '‚ñà'
    BLACK_SQUARE_WITH_WHITE = '‚ñ∞'
    BLACK_SQUARE = '‚ñ†'
    HEAVY_HORIZONTAL = '‚îÅ'
    DOUBLE_HORIZONTAL = '‚ïê'
    BLACK_HORIZONTAL_RECTANGLE = '‚ñ¨'
    BLACK_CIRCLE = '‚óè'
    BLACK_VERTICAL_RECTANGLE = '‚ñÆ'
    BLACK_VERTICAL_RECTANGLE_MEDIUM = '‚ñ†'
    BLACK_SMALL_SQUARE = '‚óæ'

    LIGHT_SHADE = '‚ñë'
    WHITE_SQUARE_WITH_BLACK = '‚ñ±'
    WHITE_SQUARE = '‚ñ°'
    LIGHT_HORIZONTAL = '‚îÄ'
    WHITE_RECTANGLE = '‚ñ≠'
    WHITE_CIRCLE = '‚óã'
    WHITE_VERTICAL_RECTANGLE = '‚ñØ'
    WHITE_VERTICAL_RECTANGLE_MEDIUM = '‚ñ°'
    WHITE_SMALL_SQUARE = '‚óΩ'

    RADIO_BUTTON = 'üîò'
    MEDIUM_WHITE_CIRCLE = '‚ö™'
    FISHEYE = '‚óâ'
    BLACK_DIAMOND = '‚óÜ'
    WHITE_DIAMOND_CONTAINING_BLACK = '‚óà'
    BLACK_WHITE_VERTICAL_RECTANGLE_MEDIUM = '‚óß'
    BLACK_RIGHT_POINTING_TRIANGLE = '‚ñ∂'
    STAR = '‚≠ê'

    BAR_LENGTH = 20

    def __str__(self):
        return self.value
